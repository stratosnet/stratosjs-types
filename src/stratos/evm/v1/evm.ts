/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../binary";
import { isSet, DeepPartial, Exact, bytesFromBase64, base64FromBytes } from "../../../helpers";
export const protobufPackage = "stratos.evm.v1";
/** Params defines the EVM module parameters */
export interface Params {
  /**
   * evm denom represents the token denomination used to run the EVM state
   * transitions.
   */
  evmDenom: string;
  /** enable create toggles state transitions that use the vm.Create function */
  enableCreate: boolean;
  /** enable call toggles state transitions that use the vm.Call function */
  enableCall: boolean;
  /** extra eips defines the additional EIPs for the vm.Config */
  extraEips: bigint[];
  /** chain config defines the EVM chain configuration parameters */
  chainConfig: ChainConfig;
  feeMarketParams: FeeMarketParams;
}
/**
 * ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values
 * instead of *big.Int.
 */
export interface ChainConfig {
  /** chainId identifies the current chain and is used for replay protection */
  chainId: string;
  /** Homestead switch block (nil no fork, 0 = already homestead) */
  homesteadBlock: string;
  /** TheDAO hard-fork switch block (nil no fork) */
  daoForkBlock: string;
  /** Whether the nodes supports or opposes the DAO hard-fork */
  daoForkSupport: boolean;
  /**
   * EIP150 implements the Gas price changes
   * (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
   */
  eip150Block: string;
  /** EIP150 HF hash (needed for header only clients as only gas pricing changed) */
  eip150Hash: string;
  /** EIP155Block HF block */
  eip155Block: string;
  /** EIP158 HF block */
  eip158Block: string;
  /** Byzantium switch block (nil no fork, 0 = already on byzantium) */
  byzantiumBlock: string;
  /** Constantinople switch block (nil no fork, 0 = already activated) */
  constantinopleBlock: string;
  /** Petersburg switch block (nil same as Constantinople) */
  petersburgBlock: string;
  /** Istanbul switch block (nil no fork, 0 = already on istanbul) */
  istanbulBlock: string;
  /** Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated) */
  muirGlacierBlock: string;
  /** Berlin switch block (nil = no fork, 0 = already on berlin) */
  berlinBlock: string;
  /** London switch block (nil = no fork, 0 = already on london) */
  londonBlock: string;
  /** Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated) */
  arrowGlacierBlock: string;
  /** EIP-3675 (TheMerge) switch block (nil = no fork, 0 = already in merge proceedings) */
  mergeForkBlock: string;
}
/** State represents a single Storage key value pair item. */
export interface State {
  key: string;
  value: string;
}
/**
 * TransactionLogs define the logs generated from a transaction execution
 * with a given hash. It it used for import/export data as transactions are not
 * persisted on blockchain state after an upgrade.
 */
export interface TransactionLogs {
  hash: string;
  logs: Log[];
}
/**
 * Log represents an protobuf compatible Ethereum Log that defines a contract
 * log event. These events are generated by the LOG opcode and stored/indexed by
 * the node.
 */
export interface Log {
  /** address of the contract that generated the event */
  address: string;
  /** list of topics provided by the contract. */
  topics: string[];
  /** supplied by the contract, usually ABI-encoded */
  data: Uint8Array;
  /** block in which the transaction was included */
  blockNumber: bigint;
  /** hash of the transaction */
  txHash: string;
  /** index of the transaction in the block */
  txIndex: bigint;
  /** hash of the block in which the transaction was included */
  blockHash: string;
  /** index of the log in the block */
  index: bigint;
  /**
   * The Removed field is true if this log was reverted due to a chain
   * reorganisation. You must pay attention to this field if you receive logs
   * through a filter query.
   */
  removed: boolean;
}
/** TxResult stores results of Tx execution. */
export interface TxResult {
  /**
   * contract_address contains the ethereum address of the created contract (if
   * any). If the state transition is an evm.Call, the contract address will be
   * empty.
   */
  contractAddress: string;
  /** bloom represents the bloom filter bytes */
  bloom: Uint8Array;
  /**
   * tx_logs contains the transaction hash and the proto-compatible ethereum
   * logs.
   */
  txLogs: TransactionLogs;
  /** ret defines the bytes from the execution. */
  ret: Uint8Array;
  /** reverted flag is set to true when the call has been reverted */
  reverted: boolean;
  /** gas_used notes the amount of gas consumed while execution */
  gasUsed: bigint;
}
/** AccessTuple is the element type of an access list. */
export interface AccessTuple {
  /** hex formatted ethereum address */
  address: string;
  /** hex formatted hashes of the storage keys */
  storageKeys: string[];
}
/** TraceConfig holds extra parameters to trace functions. */
export interface TraceConfig {
  /** custom javascript tracer */
  tracer: string;
  /**
   * overrides the default timeout of 5 seconds for JavaScript-based tracing
   * calls
   */
  timeout: string;
  /** number of blocks the tracer is willing to go back */
  reexec: bigint;
  /** disable stack capture */
  disableStack: boolean;
  /** disable storage capture */
  disableStorage: boolean;
  /** print output during capture end */
  debug: boolean;
  /** maximum length of output, but zero means unlimited */
  limit: number;
  /** Chain overrides, can be used to execute a trace using future fork rules */
  overrides?: ChainConfig;
  /** enable memory capture */
  enableMemory: boolean;
  /** enable return data capture */
  enableReturnData: boolean;
}
/** Params defines the EVM module parameters */
export interface FeeMarketParams {
  /** no base fee forces the EIP-1559 base fee to 0 (needed for 0 price calls) */
  noBaseFee: boolean;
  /**
   * base fee change denominator bounds the amount the base fee can change
   * between blocks.
   */
  baseFeeChangeDenominator: number;
  /**
   * elasticity multiplier bounds the maximum gas limit an EIP-1559 block may
   * have.
   */
  elasticityMultiplier: number;
  /** height at which the base fee calculation is enabled. */
  enableHeight: bigint;
  /** base fee for EIP-1559 blocks. */
  baseFee: string;
}
function createBaseParams(): Params {
  return {
    evmDenom: "",
    enableCreate: false,
    enableCall: false,
    extraEips: [],
    chainConfig: ChainConfig.fromPartial({}),
    feeMarketParams: FeeMarketParams.fromPartial({}),
  };
}
export const Params = {
  typeUrl: "/stratos.evm.v1.Params",
  encode(message: Params, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.evmDenom !== "") {
      writer.uint32(10).string(message.evmDenom);
    }
    if (message.enableCreate === true) {
      writer.uint32(16).bool(message.enableCreate);
    }
    if (message.enableCall === true) {
      writer.uint32(24).bool(message.enableCall);
    }
    writer.uint32(34).fork();
    for (const v of message.extraEips) {
      writer.int64(v);
    }
    writer.ldelim();
    if (message.chainConfig !== undefined) {
      ChainConfig.encode(message.chainConfig, writer.uint32(42).fork()).ldelim();
    }
    if (message.feeMarketParams !== undefined) {
      FeeMarketParams.encode(message.feeMarketParams, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.evmDenom = reader.string();
          break;
        case 2:
          message.enableCreate = reader.bool();
          break;
        case 3:
          message.enableCall = reader.bool();
          break;
        case 4:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.extraEips.push(reader.int64());
            }
          } else {
            message.extraEips.push(reader.int64());
          }
          break;
        case 5:
          message.chainConfig = ChainConfig.decode(reader, reader.uint32());
          break;
        case 6:
          message.feeMarketParams = FeeMarketParams.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): Params {
    const obj = createBaseParams();
    if (isSet(object.evmDenom)) obj.evmDenom = String(object.evmDenom);
    if (isSet(object.enableCreate)) obj.enableCreate = Boolean(object.enableCreate);
    if (isSet(object.enableCall)) obj.enableCall = Boolean(object.enableCall);
    if (Array.isArray(object?.extraEips))
      obj.extraEips = object.extraEips.map((e: any) => BigInt(e.toString()));
    if (isSet(object.chainConfig)) obj.chainConfig = ChainConfig.fromJSON(object.chainConfig);
    if (isSet(object.feeMarketParams)) obj.feeMarketParams = FeeMarketParams.fromJSON(object.feeMarketParams);
    return obj;
  },
  toJSON(message: Params): unknown {
    const obj: any = {};
    message.evmDenom !== undefined && (obj.evmDenom = message.evmDenom);
    message.enableCreate !== undefined && (obj.enableCreate = message.enableCreate);
    message.enableCall !== undefined && (obj.enableCall = message.enableCall);
    if (message.extraEips) {
      obj.extraEips = message.extraEips.map((e) => (e || BigInt(0)).toString());
    } else {
      obj.extraEips = [];
    }
    message.chainConfig !== undefined &&
      (obj.chainConfig = message.chainConfig ? ChainConfig.toJSON(message.chainConfig) : undefined);
    message.feeMarketParams !== undefined &&
      (obj.feeMarketParams = message.feeMarketParams
        ? FeeMarketParams.toJSON(message.feeMarketParams)
        : undefined);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.evmDenom = object.evmDenom ?? "";
    message.enableCreate = object.enableCreate ?? false;
    message.enableCall = object.enableCall ?? false;
    message.extraEips = object.extraEips?.map((e) => BigInt(e.toString())) || [];
    if (object.chainConfig !== undefined && object.chainConfig !== null) {
      message.chainConfig = ChainConfig.fromPartial(object.chainConfig);
    }
    if (object.feeMarketParams !== undefined && object.feeMarketParams !== null) {
      message.feeMarketParams = FeeMarketParams.fromPartial(object.feeMarketParams);
    }
    return message;
  },
};
function createBaseChainConfig(): ChainConfig {
  return {
    chainId: "",
    homesteadBlock: "",
    daoForkBlock: "",
    daoForkSupport: false,
    eip150Block: "",
    eip150Hash: "",
    eip155Block: "",
    eip158Block: "",
    byzantiumBlock: "",
    constantinopleBlock: "",
    petersburgBlock: "",
    istanbulBlock: "",
    muirGlacierBlock: "",
    berlinBlock: "",
    londonBlock: "",
    arrowGlacierBlock: "",
    mergeForkBlock: "",
  };
}
export const ChainConfig = {
  typeUrl: "/stratos.evm.v1.ChainConfig",
  encode(message: ChainConfig, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.homesteadBlock !== "") {
      writer.uint32(18).string(message.homesteadBlock);
    }
    if (message.daoForkBlock !== "") {
      writer.uint32(26).string(message.daoForkBlock);
    }
    if (message.daoForkSupport === true) {
      writer.uint32(32).bool(message.daoForkSupport);
    }
    if (message.eip150Block !== "") {
      writer.uint32(42).string(message.eip150Block);
    }
    if (message.eip150Hash !== "") {
      writer.uint32(50).string(message.eip150Hash);
    }
    if (message.eip155Block !== "") {
      writer.uint32(58).string(message.eip155Block);
    }
    if (message.eip158Block !== "") {
      writer.uint32(66).string(message.eip158Block);
    }
    if (message.byzantiumBlock !== "") {
      writer.uint32(74).string(message.byzantiumBlock);
    }
    if (message.constantinopleBlock !== "") {
      writer.uint32(82).string(message.constantinopleBlock);
    }
    if (message.petersburgBlock !== "") {
      writer.uint32(90).string(message.petersburgBlock);
    }
    if (message.istanbulBlock !== "") {
      writer.uint32(98).string(message.istanbulBlock);
    }
    if (message.muirGlacierBlock !== "") {
      writer.uint32(106).string(message.muirGlacierBlock);
    }
    if (message.berlinBlock !== "") {
      writer.uint32(114).string(message.berlinBlock);
    }
    if (message.londonBlock !== "") {
      writer.uint32(146).string(message.londonBlock);
    }
    if (message.arrowGlacierBlock !== "") {
      writer.uint32(154).string(message.arrowGlacierBlock);
    }
    if (message.mergeForkBlock !== "") {
      writer.uint32(162).string(message.mergeForkBlock);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): ChainConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.chainId = reader.string();
          break;
        case 2:
          message.homesteadBlock = reader.string();
          break;
        case 3:
          message.daoForkBlock = reader.string();
          break;
        case 4:
          message.daoForkSupport = reader.bool();
          break;
        case 5:
          message.eip150Block = reader.string();
          break;
        case 6:
          message.eip150Hash = reader.string();
          break;
        case 7:
          message.eip155Block = reader.string();
          break;
        case 8:
          message.eip158Block = reader.string();
          break;
        case 9:
          message.byzantiumBlock = reader.string();
          break;
        case 10:
          message.constantinopleBlock = reader.string();
          break;
        case 11:
          message.petersburgBlock = reader.string();
          break;
        case 12:
          message.istanbulBlock = reader.string();
          break;
        case 13:
          message.muirGlacierBlock = reader.string();
          break;
        case 14:
          message.berlinBlock = reader.string();
          break;
        case 18:
          message.londonBlock = reader.string();
          break;
        case 19:
          message.arrowGlacierBlock = reader.string();
          break;
        case 20:
          message.mergeForkBlock = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): ChainConfig {
    const obj = createBaseChainConfig();
    if (isSet(object.chainId)) obj.chainId = String(object.chainId);
    if (isSet(object.homesteadBlock)) obj.homesteadBlock = String(object.homesteadBlock);
    if (isSet(object.daoForkBlock)) obj.daoForkBlock = String(object.daoForkBlock);
    if (isSet(object.daoForkSupport)) obj.daoForkSupport = Boolean(object.daoForkSupport);
    if (isSet(object.eip150Block)) obj.eip150Block = String(object.eip150Block);
    if (isSet(object.eip150Hash)) obj.eip150Hash = String(object.eip150Hash);
    if (isSet(object.eip155Block)) obj.eip155Block = String(object.eip155Block);
    if (isSet(object.eip158Block)) obj.eip158Block = String(object.eip158Block);
    if (isSet(object.byzantiumBlock)) obj.byzantiumBlock = String(object.byzantiumBlock);
    if (isSet(object.constantinopleBlock)) obj.constantinopleBlock = String(object.constantinopleBlock);
    if (isSet(object.petersburgBlock)) obj.petersburgBlock = String(object.petersburgBlock);
    if (isSet(object.istanbulBlock)) obj.istanbulBlock = String(object.istanbulBlock);
    if (isSet(object.muirGlacierBlock)) obj.muirGlacierBlock = String(object.muirGlacierBlock);
    if (isSet(object.berlinBlock)) obj.berlinBlock = String(object.berlinBlock);
    if (isSet(object.londonBlock)) obj.londonBlock = String(object.londonBlock);
    if (isSet(object.arrowGlacierBlock)) obj.arrowGlacierBlock = String(object.arrowGlacierBlock);
    if (isSet(object.mergeForkBlock)) obj.mergeForkBlock = String(object.mergeForkBlock);
    return obj;
  },
  toJSON(message: ChainConfig): unknown {
    const obj: any = {};
    message.chainId !== undefined && (obj.chainId = message.chainId);
    message.homesteadBlock !== undefined && (obj.homesteadBlock = message.homesteadBlock);
    message.daoForkBlock !== undefined && (obj.daoForkBlock = message.daoForkBlock);
    message.daoForkSupport !== undefined && (obj.daoForkSupport = message.daoForkSupport);
    message.eip150Block !== undefined && (obj.eip150Block = message.eip150Block);
    message.eip150Hash !== undefined && (obj.eip150Hash = message.eip150Hash);
    message.eip155Block !== undefined && (obj.eip155Block = message.eip155Block);
    message.eip158Block !== undefined && (obj.eip158Block = message.eip158Block);
    message.byzantiumBlock !== undefined && (obj.byzantiumBlock = message.byzantiumBlock);
    message.constantinopleBlock !== undefined && (obj.constantinopleBlock = message.constantinopleBlock);
    message.petersburgBlock !== undefined && (obj.petersburgBlock = message.petersburgBlock);
    message.istanbulBlock !== undefined && (obj.istanbulBlock = message.istanbulBlock);
    message.muirGlacierBlock !== undefined && (obj.muirGlacierBlock = message.muirGlacierBlock);
    message.berlinBlock !== undefined && (obj.berlinBlock = message.berlinBlock);
    message.londonBlock !== undefined && (obj.londonBlock = message.londonBlock);
    message.arrowGlacierBlock !== undefined && (obj.arrowGlacierBlock = message.arrowGlacierBlock);
    message.mergeForkBlock !== undefined && (obj.mergeForkBlock = message.mergeForkBlock);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<ChainConfig>, I>>(object: I): ChainConfig {
    const message = createBaseChainConfig();
    message.chainId = object.chainId ?? "";
    message.homesteadBlock = object.homesteadBlock ?? "";
    message.daoForkBlock = object.daoForkBlock ?? "";
    message.daoForkSupport = object.daoForkSupport ?? false;
    message.eip150Block = object.eip150Block ?? "";
    message.eip150Hash = object.eip150Hash ?? "";
    message.eip155Block = object.eip155Block ?? "";
    message.eip158Block = object.eip158Block ?? "";
    message.byzantiumBlock = object.byzantiumBlock ?? "";
    message.constantinopleBlock = object.constantinopleBlock ?? "";
    message.petersburgBlock = object.petersburgBlock ?? "";
    message.istanbulBlock = object.istanbulBlock ?? "";
    message.muirGlacierBlock = object.muirGlacierBlock ?? "";
    message.berlinBlock = object.berlinBlock ?? "";
    message.londonBlock = object.londonBlock ?? "";
    message.arrowGlacierBlock = object.arrowGlacierBlock ?? "";
    message.mergeForkBlock = object.mergeForkBlock ?? "";
    return message;
  },
};
function createBaseState(): State {
  return {
    key: "",
    value: "",
  };
}
export const State = {
  typeUrl: "/stratos.evm.v1.State",
  encode(message: State, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;
        case 2:
          message.value = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): State {
    const obj = createBaseState();
    if (isSet(object.key)) obj.key = String(object.key);
    if (isSet(object.value)) obj.value = String(object.value);
    return obj;
  },
  toJSON(message: State): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};
function createBaseTransactionLogs(): TransactionLogs {
  return {
    hash: "",
    logs: [],
  };
}
export const TransactionLogs = {
  typeUrl: "/stratos.evm.v1.TransactionLogs",
  encode(message: TransactionLogs, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    for (const v of message.logs) {
      Log.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): TransactionLogs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionLogs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.string();
          break;
        case 2:
          message.logs.push(Log.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): TransactionLogs {
    const obj = createBaseTransactionLogs();
    if (isSet(object.hash)) obj.hash = String(object.hash);
    if (Array.isArray(object?.logs)) obj.logs = object.logs.map((e: any) => Log.fromJSON(e));
    return obj;
  },
  toJSON(message: TransactionLogs): unknown {
    const obj: any = {};
    message.hash !== undefined && (obj.hash = message.hash);
    if (message.logs) {
      obj.logs = message.logs.map((e) => (e ? Log.toJSON(e) : undefined));
    } else {
      obj.logs = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<TransactionLogs>, I>>(object: I): TransactionLogs {
    const message = createBaseTransactionLogs();
    message.hash = object.hash ?? "";
    message.logs = object.logs?.map((e) => Log.fromPartial(e)) || [];
    return message;
  },
};
function createBaseLog(): Log {
  return {
    address: "",
    topics: [],
    data: new Uint8Array(),
    blockNumber: BigInt(0),
    txHash: "",
    txIndex: BigInt(0),
    blockHash: "",
    index: BigInt(0),
    removed: false,
  };
}
export const Log = {
  typeUrl: "/stratos.evm.v1.Log",
  encode(message: Log, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.topics) {
      writer.uint32(18).string(v!);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    if (message.blockNumber !== BigInt(0)) {
      writer.uint32(32).uint64(message.blockNumber);
    }
    if (message.txHash !== "") {
      writer.uint32(42).string(message.txHash);
    }
    if (message.txIndex !== BigInt(0)) {
      writer.uint32(48).uint64(message.txIndex);
    }
    if (message.blockHash !== "") {
      writer.uint32(58).string(message.blockHash);
    }
    if (message.index !== BigInt(0)) {
      writer.uint32(64).uint64(message.index);
    }
    if (message.removed === true) {
      writer.uint32(72).bool(message.removed);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): Log {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.topics.push(reader.string());
          break;
        case 3:
          message.data = reader.bytes();
          break;
        case 4:
          message.blockNumber = reader.uint64();
          break;
        case 5:
          message.txHash = reader.string();
          break;
        case 6:
          message.txIndex = reader.uint64();
          break;
        case 7:
          message.blockHash = reader.string();
          break;
        case 8:
          message.index = reader.uint64();
          break;
        case 9:
          message.removed = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): Log {
    const obj = createBaseLog();
    if (isSet(object.address)) obj.address = String(object.address);
    if (Array.isArray(object?.topics)) obj.topics = object.topics.map((e: any) => String(e));
    if (isSet(object.data)) obj.data = bytesFromBase64(object.data);
    if (isSet(object.blockNumber)) obj.blockNumber = BigInt(object.blockNumber.toString());
    if (isSet(object.txHash)) obj.txHash = String(object.txHash);
    if (isSet(object.txIndex)) obj.txIndex = BigInt(object.txIndex.toString());
    if (isSet(object.blockHash)) obj.blockHash = String(object.blockHash);
    if (isSet(object.index)) obj.index = BigInt(object.index.toString());
    if (isSet(object.removed)) obj.removed = Boolean(object.removed);
    return obj;
  },
  toJSON(message: Log): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    if (message.topics) {
      obj.topics = message.topics.map((e) => e);
    } else {
      obj.topics = [];
    }
    message.data !== undefined &&
      (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
    message.blockNumber !== undefined && (obj.blockNumber = (message.blockNumber || BigInt(0)).toString());
    message.txHash !== undefined && (obj.txHash = message.txHash);
    message.txIndex !== undefined && (obj.txIndex = (message.txIndex || BigInt(0)).toString());
    message.blockHash !== undefined && (obj.blockHash = message.blockHash);
    message.index !== undefined && (obj.index = (message.index || BigInt(0)).toString());
    message.removed !== undefined && (obj.removed = message.removed);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<Log>, I>>(object: I): Log {
    const message = createBaseLog();
    message.address = object.address ?? "";
    message.topics = object.topics?.map((e) => e) || [];
    message.data = object.data ?? new Uint8Array();
    if (object.blockNumber !== undefined && object.blockNumber !== null) {
      message.blockNumber = BigInt(object.blockNumber.toString());
    }
    message.txHash = object.txHash ?? "";
    if (object.txIndex !== undefined && object.txIndex !== null) {
      message.txIndex = BigInt(object.txIndex.toString());
    }
    message.blockHash = object.blockHash ?? "";
    if (object.index !== undefined && object.index !== null) {
      message.index = BigInt(object.index.toString());
    }
    message.removed = object.removed ?? false;
    return message;
  },
};
function createBaseTxResult(): TxResult {
  return {
    contractAddress: "",
    bloom: new Uint8Array(),
    txLogs: TransactionLogs.fromPartial({}),
    ret: new Uint8Array(),
    reverted: false,
    gasUsed: BigInt(0),
  };
}
export const TxResult = {
  typeUrl: "/stratos.evm.v1.TxResult",
  encode(message: TxResult, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.contractAddress !== "") {
      writer.uint32(10).string(message.contractAddress);
    }
    if (message.bloom.length !== 0) {
      writer.uint32(18).bytes(message.bloom);
    }
    if (message.txLogs !== undefined) {
      TransactionLogs.encode(message.txLogs, writer.uint32(26).fork()).ldelim();
    }
    if (message.ret.length !== 0) {
      writer.uint32(34).bytes(message.ret);
    }
    if (message.reverted === true) {
      writer.uint32(40).bool(message.reverted);
    }
    if (message.gasUsed !== BigInt(0)) {
      writer.uint32(48).uint64(message.gasUsed);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): TxResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddress = reader.string();
          break;
        case 2:
          message.bloom = reader.bytes();
          break;
        case 3:
          message.txLogs = TransactionLogs.decode(reader, reader.uint32());
          break;
        case 4:
          message.ret = reader.bytes();
          break;
        case 5:
          message.reverted = reader.bool();
          break;
        case 6:
          message.gasUsed = reader.uint64();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): TxResult {
    const obj = createBaseTxResult();
    if (isSet(object.contractAddress)) obj.contractAddress = String(object.contractAddress);
    if (isSet(object.bloom)) obj.bloom = bytesFromBase64(object.bloom);
    if (isSet(object.txLogs)) obj.txLogs = TransactionLogs.fromJSON(object.txLogs);
    if (isSet(object.ret)) obj.ret = bytesFromBase64(object.ret);
    if (isSet(object.reverted)) obj.reverted = Boolean(object.reverted);
    if (isSet(object.gasUsed)) obj.gasUsed = BigInt(object.gasUsed.toString());
    return obj;
  },
  toJSON(message: TxResult): unknown {
    const obj: any = {};
    message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
    message.bloom !== undefined &&
      (obj.bloom = base64FromBytes(message.bloom !== undefined ? message.bloom : new Uint8Array()));
    message.txLogs !== undefined &&
      (obj.txLogs = message.txLogs ? TransactionLogs.toJSON(message.txLogs) : undefined);
    message.ret !== undefined &&
      (obj.ret = base64FromBytes(message.ret !== undefined ? message.ret : new Uint8Array()));
    message.reverted !== undefined && (obj.reverted = message.reverted);
    message.gasUsed !== undefined && (obj.gasUsed = (message.gasUsed || BigInt(0)).toString());
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<TxResult>, I>>(object: I): TxResult {
    const message = createBaseTxResult();
    message.contractAddress = object.contractAddress ?? "";
    message.bloom = object.bloom ?? new Uint8Array();
    if (object.txLogs !== undefined && object.txLogs !== null) {
      message.txLogs = TransactionLogs.fromPartial(object.txLogs);
    }
    message.ret = object.ret ?? new Uint8Array();
    message.reverted = object.reverted ?? false;
    if (object.gasUsed !== undefined && object.gasUsed !== null) {
      message.gasUsed = BigInt(object.gasUsed.toString());
    }
    return message;
  },
};
function createBaseAccessTuple(): AccessTuple {
  return {
    address: "",
    storageKeys: [],
  };
}
export const AccessTuple = {
  typeUrl: "/stratos.evm.v1.AccessTuple",
  encode(message: AccessTuple, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.storageKeys) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): AccessTuple {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTuple();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;
        case 2:
          message.storageKeys.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): AccessTuple {
    const obj = createBaseAccessTuple();
    if (isSet(object.address)) obj.address = String(object.address);
    if (Array.isArray(object?.storageKeys)) obj.storageKeys = object.storageKeys.map((e: any) => String(e));
    return obj;
  },
  toJSON(message: AccessTuple): unknown {
    const obj: any = {};
    message.address !== undefined && (obj.address = message.address);
    if (message.storageKeys) {
      obj.storageKeys = message.storageKeys.map((e) => e);
    } else {
      obj.storageKeys = [];
    }
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<AccessTuple>, I>>(object: I): AccessTuple {
    const message = createBaseAccessTuple();
    message.address = object.address ?? "";
    message.storageKeys = object.storageKeys?.map((e) => e) || [];
    return message;
  },
};
function createBaseTraceConfig(): TraceConfig {
  return {
    tracer: "",
    timeout: "",
    reexec: BigInt(0),
    disableStack: false,
    disableStorage: false,
    debug: false,
    limit: 0,
    overrides: undefined,
    enableMemory: false,
    enableReturnData: false,
  };
}
export const TraceConfig = {
  typeUrl: "/stratos.evm.v1.TraceConfig",
  encode(message: TraceConfig, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.tracer !== "") {
      writer.uint32(10).string(message.tracer);
    }
    if (message.timeout !== "") {
      writer.uint32(18).string(message.timeout);
    }
    if (message.reexec !== BigInt(0)) {
      writer.uint32(24).uint64(message.reexec);
    }
    if (message.disableStack === true) {
      writer.uint32(40).bool(message.disableStack);
    }
    if (message.disableStorage === true) {
      writer.uint32(48).bool(message.disableStorage);
    }
    if (message.debug === true) {
      writer.uint32(64).bool(message.debug);
    }
    if (message.limit !== 0) {
      writer.uint32(72).int32(message.limit);
    }
    if (message.overrides !== undefined) {
      ChainConfig.encode(message.overrides, writer.uint32(82).fork()).ldelim();
    }
    if (message.enableMemory === true) {
      writer.uint32(88).bool(message.enableMemory);
    }
    if (message.enableReturnData === true) {
      writer.uint32(96).bool(message.enableReturnData);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): TraceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.tracer = reader.string();
          break;
        case 2:
          message.timeout = reader.string();
          break;
        case 3:
          message.reexec = reader.uint64();
          break;
        case 5:
          message.disableStack = reader.bool();
          break;
        case 6:
          message.disableStorage = reader.bool();
          break;
        case 8:
          message.debug = reader.bool();
          break;
        case 9:
          message.limit = reader.int32();
          break;
        case 10:
          message.overrides = ChainConfig.decode(reader, reader.uint32());
          break;
        case 11:
          message.enableMemory = reader.bool();
          break;
        case 12:
          message.enableReturnData = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): TraceConfig {
    const obj = createBaseTraceConfig();
    if (isSet(object.tracer)) obj.tracer = String(object.tracer);
    if (isSet(object.timeout)) obj.timeout = String(object.timeout);
    if (isSet(object.reexec)) obj.reexec = BigInt(object.reexec.toString());
    if (isSet(object.disableStack)) obj.disableStack = Boolean(object.disableStack);
    if (isSet(object.disableStorage)) obj.disableStorage = Boolean(object.disableStorage);
    if (isSet(object.debug)) obj.debug = Boolean(object.debug);
    if (isSet(object.limit)) obj.limit = Number(object.limit);
    if (isSet(object.overrides)) obj.overrides = ChainConfig.fromJSON(object.overrides);
    if (isSet(object.enableMemory)) obj.enableMemory = Boolean(object.enableMemory);
    if (isSet(object.enableReturnData)) obj.enableReturnData = Boolean(object.enableReturnData);
    return obj;
  },
  toJSON(message: TraceConfig): unknown {
    const obj: any = {};
    message.tracer !== undefined && (obj.tracer = message.tracer);
    message.timeout !== undefined && (obj.timeout = message.timeout);
    message.reexec !== undefined && (obj.reexec = (message.reexec || BigInt(0)).toString());
    message.disableStack !== undefined && (obj.disableStack = message.disableStack);
    message.disableStorage !== undefined && (obj.disableStorage = message.disableStorage);
    message.debug !== undefined && (obj.debug = message.debug);
    message.limit !== undefined && (obj.limit = Math.round(message.limit));
    message.overrides !== undefined &&
      (obj.overrides = message.overrides ? ChainConfig.toJSON(message.overrides) : undefined);
    message.enableMemory !== undefined && (obj.enableMemory = message.enableMemory);
    message.enableReturnData !== undefined && (obj.enableReturnData = message.enableReturnData);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<TraceConfig>, I>>(object: I): TraceConfig {
    const message = createBaseTraceConfig();
    message.tracer = object.tracer ?? "";
    message.timeout = object.timeout ?? "";
    if (object.reexec !== undefined && object.reexec !== null) {
      message.reexec = BigInt(object.reexec.toString());
    }
    message.disableStack = object.disableStack ?? false;
    message.disableStorage = object.disableStorage ?? false;
    message.debug = object.debug ?? false;
    message.limit = object.limit ?? 0;
    if (object.overrides !== undefined && object.overrides !== null) {
      message.overrides = ChainConfig.fromPartial(object.overrides);
    }
    message.enableMemory = object.enableMemory ?? false;
    message.enableReturnData = object.enableReturnData ?? false;
    return message;
  },
};
function createBaseFeeMarketParams(): FeeMarketParams {
  return {
    noBaseFee: false,
    baseFeeChangeDenominator: 0,
    elasticityMultiplier: 0,
    enableHeight: BigInt(0),
    baseFee: "",
  };
}
export const FeeMarketParams = {
  typeUrl: "/stratos.evm.v1.FeeMarketParams",
  encode(message: FeeMarketParams, writer: BinaryWriter = BinaryWriter.create()): BinaryWriter {
    if (message.noBaseFee === true) {
      writer.uint32(8).bool(message.noBaseFee);
    }
    if (message.baseFeeChangeDenominator !== 0) {
      writer.uint32(16).uint32(message.baseFeeChangeDenominator);
    }
    if (message.elasticityMultiplier !== 0) {
      writer.uint32(24).uint32(message.elasticityMultiplier);
    }
    if (message.enableHeight !== BigInt(0)) {
      writer.uint32(40).int64(message.enableHeight);
    }
    if (message.baseFee !== "") {
      writer.uint32(50).string(message.baseFee);
    }
    return writer;
  },
  decode(input: BinaryReader | Uint8Array, length?: number): FeeMarketParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeeMarketParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.noBaseFee = reader.bool();
          break;
        case 2:
          message.baseFeeChangeDenominator = reader.uint32();
          break;
        case 3:
          message.elasticityMultiplier = reader.uint32();
          break;
        case 5:
          message.enableHeight = reader.int64();
          break;
        case 6:
          message.baseFee = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },
  fromJSON(object: any): FeeMarketParams {
    const obj = createBaseFeeMarketParams();
    if (isSet(object.noBaseFee)) obj.noBaseFee = Boolean(object.noBaseFee);
    if (isSet(object.baseFeeChangeDenominator))
      obj.baseFeeChangeDenominator = Number(object.baseFeeChangeDenominator);
    if (isSet(object.elasticityMultiplier)) obj.elasticityMultiplier = Number(object.elasticityMultiplier);
    if (isSet(object.enableHeight)) obj.enableHeight = BigInt(object.enableHeight.toString());
    if (isSet(object.baseFee)) obj.baseFee = String(object.baseFee);
    return obj;
  },
  toJSON(message: FeeMarketParams): unknown {
    const obj: any = {};
    message.noBaseFee !== undefined && (obj.noBaseFee = message.noBaseFee);
    message.baseFeeChangeDenominator !== undefined &&
      (obj.baseFeeChangeDenominator = Math.round(message.baseFeeChangeDenominator));
    message.elasticityMultiplier !== undefined &&
      (obj.elasticityMultiplier = Math.round(message.elasticityMultiplier));
    message.enableHeight !== undefined && (obj.enableHeight = (message.enableHeight || BigInt(0)).toString());
    message.baseFee !== undefined && (obj.baseFee = message.baseFee);
    return obj;
  },
  fromPartial<I extends Exact<DeepPartial<FeeMarketParams>, I>>(object: I): FeeMarketParams {
    const message = createBaseFeeMarketParams();
    message.noBaseFee = object.noBaseFee ?? false;
    message.baseFeeChangeDenominator = object.baseFeeChangeDenominator ?? 0;
    message.elasticityMultiplier = object.elasticityMultiplier ?? 0;
    if (object.enableHeight !== undefined && object.enableHeight !== null) {
      message.enableHeight = BigInt(object.enableHeight.toString());
    }
    message.baseFee = object.baseFee ?? "";
    return message;
  },
};
